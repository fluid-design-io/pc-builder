// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                   String    @id @default(cuid())
  name                 String    @default("")
  email                String    @unique @default("")
  password             String?
  role                 Role?     @relation("User_role", fields: [roleId], references: [id])
  roleId               String?   @map("role")
  orders               Order[]   @relation("Order_user")
  address              Address[] @relation("Address_user")
  updatedAt            DateTime? @updatedAt
  createdAt            DateTime? @default(now())
  from_Order_recipient Order[]   @relation("Order_recipient")

  @@index([roleId])
}

model Role {
  id               String  @id @default(cuid())
  name             String  @default("")
  canManageContent Boolean @default(false)
  canManageUsers   Boolean @default(false)
  users            User[]  @relation("User_role")
}

model Order {
  id                     String        @id @default(cuid())
  name                   String        @default("")
  description            String        @default("")
  status                 String        @default("")
  user                   User?         @relation("Order_user", fields: [userId], references: [id])
  userId                 String?       @map("user")
  items                  OrderItem[]   @relation("OrderItem_order")
  deliveryDate           DateTime
  recipient              User?         @relation("Order_recipient", fields: [recipientId], references: [id])
  recipientId            String?       @map("recipient")
  address                Address?      @relation("Order_address", fields: [addressId], references: [id])
  addressId              String?       @map("address")
  updatedAt              DateTime?     @updatedAt
  createdAt              DateTime?     @default(now())
  from_OrderStatus_order OrderStatus[] @relation("OrderStatus_order")

  @@index([userId])
  @@index([recipientId])
  @@index([addressId])
}

model OrderItem {
  id          String  @id @default(cuid())
  name        String  @default("")
  description String  @default("")
  order       Order?  @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String? @map("order")
  price       Int?
  quantity    Int?    @default(1)

  @@index([orderId])
}

model OrderStatus {
  id          String    @id @default(cuid())
  order       Order?    @relation("OrderStatus_order", fields: [orderId], references: [id])
  orderId     String?   @map("order")
  status      String?
  description String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())

  @@index([orderId])
}

model Address {
  id                 String  @id @default(cuid())
  user               User?   @relation("Address_user", fields: [userId], references: [id])
  userId             String? @map("user")
  street             String  @default("")
  city               String  @default("")
  state              String  @default("CA")
  zip                String  @default("")
  country            String  @default("United States")
  geolocation        String?
  from_Order_address Order[] @relation("Order_address")

  @@index([userId])
}
